trigger:
  - main
  - rel/*

variables:
  SingletonMsiName: 'EF6Tools'

resources:
  repositories:
  - repository: MicroBuildTemplate
    type: git
    name: 1ESPipelineTemplates/MicroBuildTemplate
    ref: refs/tags/release

extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate
  parameters:
    sdl:
      name: VSEngSS-MicroBuild2022-1ES
      image: windows.vs2022.amd64
      os: windows
    pool:
      name: VSEngSS-MicroBuild2022-1ES
      demands:
      - Cmd
      - msbuild
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: stage
      jobs:
      - job: job
        templateContext:
          mb:
            localization:
              enabled: true
            signing:
              enabled: true
              signType: '$(SigningType)'
            swix:
              enabled: true
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish VSIX, MSI and CAB to VSTS'
            condition: or(
                          eq(variables['Build.SourceBranch'], 'refs/heads/main'), 
                          startsWith(variables['Build.SourceBranch'], 'refs/heads/rel/')
                         )
            targetPath: '$(Build.ArtifactStagingDirectory)\SetupResults'
            artifactName: SetupResults
          - output: pipelineArtifact
            displayName: 'Publish PDB and XML Files To VSTS'
            targetPath: '$(Build.ArtifactStagingDirectory)\PdbsAndXmls'
            artifactName: PdbsAndXmls
          - output: pipelineArtifact
            displayName: 'Publish BinDirContents'
            targetPath: '$(Build.ArtifactStagingDirectory)\BinDirContents'
            artifactName: BinDirContents
        steps:
        - powershell: |
            # Write your powershell commands here.
            $path = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -prerelease -all -latest -property installationPath
            Write-Output $path
            # Use the environment variables input below to pass secret variables to this script.
          displayName: 'Run vswhere'
          enabled: false

        - task: NuGetAuthenticate@1
          displayName: 'NuGet Authenticate'

        - task: NuGetToolInstaller@1
          displayName: 'Use NuGet'

        - task: BatchScript@1
          displayName: 'Run EFBuild'
          inputs:
            filename: '$(comspec)'
            arguments: '/c "call "$(ProgramFiles)\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" & msbuild $(Build.Repository.LocalPath)\EFTools.msbuild /p:RunCodeAnalysis=false /p:Configuration=$(BuildConfiguration) /t:EnableSkipStrongNames;Clean;BuildDesigner -flp3:verbosity=diagnostic;logfile=$(Build.SourcesDirectory)\bin\$(BuildConfiguration)\BuildDesigner.log -binaryLogger:logfile=$(Build.SourcesDirectory)\bin\$(BuildConfiguration)\BuildDesigner.binlog"'

        - task: MSBuild@1
          displayName: 'Localize Assemblies'
          inputs:
            solution: 'build\loc.proj'
            configuration: '$(BuildConfiguration)'
            msbuildArguments: '/t:AfterBuild'

        - task: MSBuild@1
          displayName: 'Sign Unlocalized and Localized Assemblies'
          inputs:
            solution: 'build\sign.proj'
            configuration: '$(BuildConfiguration)'
            msbuildArguments: '/t:AfterBuild'

        - task: NuGetCommand@2
          displayName: 'NuGet Restore Setup Inputs Packages'
          inputs:
            command: custom
            feedsToUse: config
            externalFeedCredentials: 'OSSCG Feed - Microsoft approved OSS packages'
            arguments: 'restore $(Build.Repository.LocalPath)\src\EFTools\setup\GenerateMsiInputs\packages.config -SolutionDirectory $(MsiRuntimeInputsPath) -Verbosity Detailed -NonInteractive'

        - task: BatchScript@1
          displayName: 'Extract Setup Inputs Nuspecs'
          inputs:
            filename: '$(comspec)'
            arguments: '/c "call "$(ProgramFiles)\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" & msbuild $(Build.Repository.LocalPath)\src\EFTools\setup\GenerateMsiInputs\GenerateMsiInputs.msbuild /p:Configuration=$(BuildConfiguration) /t:ExtractNuspecs"'

        - task: MSBuild@1
          displayName: 'Build VSIX'
          inputs:
            solution: 'setup\swix\vs_eftools.swixproj'
            configuration: '$(BuildConfiguration)'
            msbuildArguments: '/t:Build'

        - task: NuGetCommand@2
          displayName: 'NuGet Restore WixProj Using CredentialManager'
          inputs:
            command: custom
            feedsToUse: config
            nugetConfigPath: '.nuget\NuGet.config'
            externalFeedCredentials: 'OSSCG Feed - Microsoft approved OSS packages'
            arguments: 'restore $(Build.Repository.LocalPath)\setup\wix\packages.config -SolutionDirectory $(Build.Repository.LocalPath)\setup\wix -Verbosity Detailed -NonInteractive -ConfigFile $(Build.Repository.LocalPath)\.nuget\NuGet.config'

        - task: MSBuild@1
          displayName: 'Build Singleton MSI'
          inputs:
            solution: '$(Build.Repository.LocalPath)\setup\wix\EFToolsWillowMsi.wixproj'
            msbuildArchitecture: x64
            configuration: '$(BuildConfiguration)'
            msbuildArguments: '/t:Build /v:d /bl:$(Build.SourcesDirectory)\bin\$(BuildConfiguration)\BuildSingletonMSI.binlog'
          timeoutInMinutes: 30

        - task: MSBuild@1
          displayName: Generate parameters for VS Insertion
          inputs:
            solution: $(Build.SourcesDirectory)\Setup\Metadata\CreateInsertionMetadata.proj
            msbuildArguments: /r /p:Configuration=$(BuildConfiguration)

        - task: CopyFiles@2
          displayName: 'Copy VSIX, MSI and CAB'
          inputs:
            SourceFolder: 'bin\$(BuildConfiguration)'
            Contents: |
              vs_eftools.vsix
              vs_eftools.json
              $(SingletonMsiName).msi
              $(SingletonMsiName).cab
              $(SingletonMsiName).wixpdb
              BuildDesigner.log
              BuildDesigner.binlog
              BuildSingletonMSI.binlog
              EFTools15.nuspec
              InsertionParameters.txt
            TargetFolder: '$(Build.ArtifactStagingDirectory)\SetupResults'

        - task: CopyFiles@2
          displayName: 'Copy PDB and XML Files'
          inputs:
            SourceFolder: 'bin\$(BuildConfiguration)'
            Contents: |
              Microsoft.Data.*.pdb
              Microsoft.VisualStudio.Data.*.pdb
              Microsoft.Data.*.xml
              Microsoft.VisualStudio.Data.*.xml
            TargetFolder: '$(Build.ArtifactStagingDirectory)\PdbsAndXmls'

        - task: PublishSymbols@2
          displayName: 'Enable Source Server'
          inputs:
            SymbolsFolder: '$(Build.ArtifactStagingDirectory)\PdbsAndXmls'
            SearchPattern: '*.pdb'
            SymbolServerType: TeamServices
            SymbolsProduct: 'Entity_Framework_Tools'

        - task: CopyFiles@2
          displayName: 'Copy BinDirContents'
          inputs:
            Contents: '$(Build.SourcesDirectory)\bin\**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)\BinDirContents'

